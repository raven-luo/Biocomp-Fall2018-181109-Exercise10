a=(Abby,Britney,Cat,Diane,Evey)
a=Abby,Britney,Cat,Diane,Evey
a=1,2,3,4,5
a<-5
a=c("abby","britney","cat","diane","Evey")
a[3]
a[1,2]
a[1:2]
M=matrix(1;4,nrow=2,ncol=2)
M=matrix(1:4,nrow=2,ncol=2)
View(M)
a=list(a,M)
a=c("abby","britney","cat","diane","Evey")
b=list(a,M)
View(M)
b[[1]][4]
b[[1]][4:5]
b[[1]][4,5]
halfmin=function(series){
halfmin=min(series)/2
return(halfmin)
}
halfmin(c(3,2,1))
halfmin(c(3,2,1))
halfmin(c(3,2,1),3)
halfmin=function(series,divideby=2){
halfmin=min(series)/divideby
return(halfmin)
}
halfmin(c(3,2,1),3)
local=function(local){
output=local/global
return(output)
}
local(3)
local=function(local){
output=local/global
return(output)
}
global=3
local(3)
local(3)
local=function(local){
output=local/global
return(output)
}
global=2
local(3)
local=function(local){
output=locali/global
return(output)
}
global=2
local(3)
locali
setwd("C:/Users/raven/Desktop/biocomputing/exercise10/")
data=read.csv(file="data.txt",header=TRUE)
setwd("C:/Users/raven/Desktop/biocomputing/exercise10/Biocomp-Fall2018-181109-Exercise10")
data=read.csv(file="data.txt",header=TRUE)
View(data)
View(data)
nllike=function(p,x,y){
a=p[1]
b=p[2]
c=p[3]
sigma=exp(p[3])
expected=a+b*x+c*(x^2)
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
setwd("C:/Users/raven/Desktop/biocomputing/exercise10/Biocomp-Fall2018-181109-Exercise10")
data=read.csv(file="data.txt",header=TRUE)
nllike=function(p,x,y){
a=p[1]
b=p[2]
c=p[3]
sigma=exp(p[4]) #Question: you still need an error term right?
expected=a+b*x+c*(x^2)
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
initialGuess=c(1,1,1,1)
fit_quad=optim(par=initialGuess,fn=nllike,x=data$x,y=data$y)
print(fit_quad)
data=read.csv(file="data.txt",header=TRUE)
nllike_quad=function(p,x,y){
a=p[1]
b=p[2]
c=p[3]
sigma=exp(p[4]) #Question: you still need an error term right?
expected=a+b*x+c*(x^2)
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
initialGuess_quad=c(1,1,1,1)
fit_quad=optim(par=initialGuess,fn=nllike_quad,x=data$x,y=data$y)
print(fit_quad)
nllike_lin=function(p,x,y){
a=p[1]
b=p[2]
sigma=exp(p[3])
expected=a+b*c
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
initialGuess_lin=c(1,1,1)
fit_lin=optim(par=initialGuess_lin,fn=nllike_lin,x=data$x,y=data$y)
print(fit_lin)
fit_quad=optim(par=initialGuess,fn=nllike_quad,x=data$x,y=data$y)
print(fit_quad)
nllike_lin=function(p,x,y){
a=p[1]
b=p[2]
sigma=exp(p[3])
expected=a+b*x
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
initialGuess_lin=c(1,1,1)
fit_lin=optim(par=initialGuess_lin,fn=nllike_lin,x=data$x,y=data$y)
print(fit_lin)
nllike_lin=function(p,x,y){
a=p[1]
b=p[2]
sigma=exp(p[3])
expected=a+b*x
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
initialGuess_lin=c(1,1,1)
fit_lin=optim(par=initialGuess_lin,fn=nllike_lin,x=data$x,y=data$y)
print(fit_lin)
p_quad=fit_quad[1]
View(p_quad)
View(p_quad)
p_quad=c(0.002739866,0.210599462,0.114017389,3.647282158)
quadNLL=nllike_quad(p_quad)
quadNLL=nllike_quad(p_quad,data$x,data$y)
p_lin=c(16.993438,4.481469,2.888480)
linNLL=nllike_lin(p_lin,data$x,data$y)
#Likelihood ratio test
testStatistic=2*(quadNLL-linNLL)
testStatistic=2*(quadNLL-linNLL)
df=length(fit_quad$par)-length(fit_lin$par)
1-pchisq(x=testStatistic,df=data)
quadNLL=nllike_quad(fit_quad$par,data$x,data$y) #Question: is this how you get quadNLL?
quadNLL=nllike_quad(fit_quad$par,data$x,data$y) #Question: is this how you get quadNLL?
linNLL=nllike_lin(fit_lin$par,data$x,data$y)
#Likelihood ratio test
testStatistic=2*(quadNLL-linNLL)
df=length(fit_quad$par)-length(fit_lin$par)
1-pchisq(x=testStatistic,df=data)
1-pchisq(x=testStatistic,df=df)
1-pchisq(q=testStatistic,df=df)
#Task 1
setwd("C:/Users/raven/Desktop/biocomputing/exercise10/Biocomp-Fall2018-181109-Exercise10")
data=read.csv(file="data.txt",header=TRUE)
#Maximum likelihood
#Quadratic
nllike_quad=function(p,x,y){
a=p[1]
b=p[2]
c=p[3]
sigma=exp(p[4]) #Question: you still need an error term right?
expected=a+b*x+c*(x^2)
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
initialGuess_quad=c(1,1,1,1)
fit_quad=optim(par=initialGuess,fn=nllike_quad,x=data$x,y=data$y)
print(fit_quad)
quadNLL=nllike_quad(fit_quad$par,data$x,data$y) #Question: is this how you get quadNLL?
#Linear
nllike_lin=function(p,x,y){
a=p[1]
b=p[2]
sigma=exp(p[3])
expected=a+b*x
nll=-sum(dnorm(x=y,mean=expected,sd=sigma,log=TRUE))
return(nll)
}
initialGuess_lin=c(1,1,1)
fit_lin=optim(par=initialGuess_lin,fn=nllike_lin,x=data$x,y=data$y)
print(fit_lin)
linNLL=nllike_lin(fit_lin$par,data$x,data$y)
#Likelihood ratio test
testStatistic=2*(quadNLL-linNLL)
df=length(fit_quad$par)-length(fit_lin$par)
p_value=1-pchisq(q=testStatistic,df=df)
if (p_value<0.05) {print("The difference between quadratic and linear models are significant. The quadratic model is better.")} else {print("The difference between the models are not significant. The linear model is better")}
library(deSolve)
library(ggplot2)
ddSim=function(t,y,p){
N1=y[1]
N2=y[2]
R1=p[1]
R2=p[2]
a11=p[3] #a12<a11, p[5]<p[3]
a22=p[4]
a12=p[5]
a21=p[6] #a21<a22, p[6]<p[4]
dN1dt=R1*(1-N1*a11-N2*a12)*N1
dN2dt=R2*(1-N2*a22-N1*a21)*N2
return(list(c(dN1dt,dN2dt)))
}
params1=c(0.5,0.5,10,10,0.5,2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(50,50) #Question: I just randomly generated this
times=1:100
for (params in c(params1.params2,params3,params4)) {
modelSim=ode(y=N0,times=times,func=ddSim,parms=params) #overwritten with each iteration
modelOutput=modelOutput+data.frame(time=modelSim[,1],N1=modelSim[,2],N2=modelSim[,3],params=params) #appended with each iteration, with a column indicating parameter set
}
for (params in c(params1,params2,params3,params4)) {
modelSim=ode(y=N0,times=times,func=ddSim,parms=params) #overwritten with each iteration
modelOutput=modelOutput+data.frame(time=modelSim[,1],N1=modelSim[,2],N2=modelSim[,3],params=params) #appended with each iteration, with a column indicating parameter set
}
modelOutput=0
for (params in c(params1,params2,params3,params4)) {
modelSim=ode(y=N0,times=times,func=ddSim,parms=params) #overwritten with each iteration
modelOutput=rbind(modelOutput,data.frame(time=modelSim[,1],N1=modelSim[,2],N2=modelSim[,3],params=params)) #appended with each iteration, with a column indicating parameter set
}
View(modelOutput)
View(modelOutput)
N0=c(50,50) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim[,1],N1=modelSim[,2],N2=modelSim[,3])
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
rm(list())
rm(ls())
rm(list=ls())
library(deSolve)
library(ggplot2)
ddSim=function(t,y,p){
N1=y[1]
N2=y[2]
R1=p[1]
R2=p[2]
a11=p[3] #a12<a11, p[5]<p[3]
a22=p[4]
a12=p[5]
a21=p[6] #a21<a22, p[6]<p[4]
dN1dt=R1*(1-N1*a11-N2*a12)*N1
dN2dt=R2*(1-N2*a22-N1*a21)*N2
return(list(c(dN1dt,dN2dt)))
}
params1=c(0.5,0.5,10,10,0.5,2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(50,50) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
View(modelSim1)
View(modelSim1)
View(modelOutput1)
View(modelOutput1)
plot1=ggplot()+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N1),color="blue")+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
library(ggplot2)
plot1=ggplot()+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N1),color="blue")+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
install.packages("dplyr")
plot1=ggplot()+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N1),color="blue")+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
library(deSolve)
library(ggplot2)
ddSim=function(t,y,p){
N1=y[1]
N2=y[2]
R1=p[1]
R2=p[2]
a11=p[3] #a12<a11, p[5]<p[3]
a22=p[4]
a12=p[5]
a21=p[6] #a21<a22, p[6]<p[4]
dN1dt=R1*(1-N1*a11-N2*a12)*N1
dN2dt=R2*(1-N2*a22-N1*a21)*N2
return(list(c(dN1dt,dN2dt)))
}
params1=c(0.5,0.5,10,10,0.5,2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(50,50) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot()+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N1),color="blue")+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N1),color="blue")+geom_line(data=modelOutput1,aes(x=modelOutput1$time,y=modelOutput1$N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
View(modelOutput1)
View(modelOutput1)
ggplot(modelOutput1,aes(x=time,y=Nn))+geom_line()+theme_classic()
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
ggplot(modelOutput1,aes(x=time,y=N1))+geom_line()+theme_classic()
ggplot(modelOutput,aes(x=time,y=Nt))+geom_line()+theme_classic()
ggplot(modelOutput,aes(x=time,y=N2))+geom_line()+theme_classic()
ggplot(modelOutput,aes(x=time,y=N2))+geom_line()+theme_classic()
ggplot(modelOutput1,aes(x=time,y=N2))+geom_line()+theme_classic()
ggplot(modelOutput1,aes(x=time,y=N1))+geom_line()+theme_classic()
modelSim2=ode(y=N0,times=times,func=ddSim,parms=params2)
modelOutput2=data.frame(time=modelSim2[,1],N1=modelSim2[,2],N2=modelSim2[,3])
plot2=ggplot(data=modelOutput2)+geom_line(data=modelOutput2,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput2,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot2)
for (params in c(params1,params2,params3,params4)) {
modelSim=ode(y=N0,times=times,func=ddSim,parms=params) #overwritten with each iteration
modelOutput=data.frame(time=modelSim[,1],N1=modelSim[,2],N2=modelSim[,3]) #appended with each iteration, with a column indicating parameter set
plot=ggplot(data=modelOutput)+geom_line(data=modelOutput,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
return(plot)
}
View(plot)
for (params in c(params1,params2,params3,params4)) {
modelSim=ode(y=N0,times=times,func=ddSim,parms=params) #overwritten with each iteration
modelOutput=data.frame(time=modelSim[,1],N1=modelSim[,2],N2=modelSim[,3]) #appended with each iteration, with a column indicating parameter set
plot=ggplot(data=modelOutput)+geom_line(data=modelOutput,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot)
}
modelSim3=ode(y=N0,times=times,func=ddSim,parms=params3)
modelOutput3=data.frame(time=modelSim3[,1],N1=modelSim3[,2],N2=modelSim3[,3])
plot3=ggplot(data=modelOutput3)+geom_line(data=modelOutput3,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput3,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot3)
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
params1=c(0.5,0.5,10,10,0.5,2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(10,10) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
params1=c(0.5,0.5,10,10,5,2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(10,10) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
params1=c(0.5,0.5,6,4,5,2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(10,10) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
params1=c(0.5,0.5,0.6,0.4,0.5,0.2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(10,10) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
params1=c(0.5,0.5,0.6,0.4,0.1,0.1) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(10,10) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
params1=c(0.5,0.5,0.6,0.4,0.4,0.2) #p[5]<p[3] & p[6]<p[4]
params2=c(0.5,0.5,0.5,10,10,2) #p[6]<p[4] only
params3=c(0.5,0.5,10,2,0.5,10) #p[5]<p[3] only
params4=c(0.5,0.5,0.5,2,10,10) #neither
N0=c(10,10) #Question: I just randomly generated this
times=1:100
modelSim1=ode(y=N0,times=times,func=ddSim,parms=params1)
modelOutput1=data.frame(time=modelSim1[,1],N1=modelSim1[,2],N2=modelSim1[,3])
plot1=ggplot(data=modelOutput1)+geom_line(data=modelOutput1,aes(x=time,y=N1),color="blue")+geom_line(data=modelOutput1,aes(x=time,y=N2),color="red")+xlab("Time")+ylab("Population")
print(plot1)
